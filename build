#!/usr/bin/env python3

import os

with open('rat19f/lexer.py', 'r') as f:
    lexer_content = f.read()

with open('rat19f/syntax_analyzer.py', 'r') as f:
    sa_content = f.read()

with open('rat19f/code_generation.py', 'r') as f:
    go_content = f.read()

program_start = """
'''Start of Program'''

def main():
    import sys
    filename = sys.argv[-1]
    program = sys.argv[-2]
    if program == 'lexer':
        lexer = Lexer(filename)
        with open('lexer.out', 'w') as f:
            f.write('{0:15}  {1}'.format('Tokens', 'Lexemes') + '\\n' + '-'*24 + '\\n')
            print('{0:15}  {1}'.format('Tokens', 'Lexemes') + '\\n' + '-'*24)
            for vals in lexer:
                f.write('{0:15}  {1}'.format(vals['token'], vals['lexeme']) + '\\n')
                print('{0:15}  {1}'.format(vals['token'], vals['lexeme']))
    elif program == 'syntax':
        lexer = Lexer(filename)
        syntax_analyzer = SyntaxAnalyzer(lexer.scanner())
        ex = ''
        try:
            syntax_analyzer.rat19f()
        except Exception as e:
            ex = str(e)
        stack = syntax_analyzer.output
        stack.append(ex)
        with open('syntax.out', 'w') as f:
            for output in stack:
                f.write(output + '\\n')
                print(output)
    elif program == 'generator':
        lexer = Lexer(filename)
        go = CodeGenerator(lexer.scanner())
        ex = ''
        go.rat19f()
        with open('generator.out', 'w') as f:
            f.write('{0:10} {1:10} {2}'.format("Address", "Operation", "Operand") + '\\n')
            print('{0:10} {1:10} {2}'.format("Address", "Operation", "Operand"))
            for code in go.code_listing:
                f.write('{0:10} {1:10} {2}'.format(str(code['address']), code['operation'], str(code['operand'])) + '\\n')
                print('{0:10} {1:10} {2}'.format(str(code['address']), code['operation'], str(code['operand'])))
            f.write('\\n')
            print()
            f.write('{0:15} {1}'.format("Identifier", "Memory Location") + '\\n')
            print('{0:15} {1}'.format("Identifier", "Memory Location"))
            for row in go.symbol_table:
                f.write('{0:15} {1}'.format(row[0], str(row[1])) + '\\n')
                print('{0:15} {1}'.format(row[0], str(row[1])))
        

if __name__ == '__main__':
    main()
"""


with open('rat', 'w') as f:
        f.write('#!/usr/bin/env python3\n')
        f.write(lexer_content)
        f.write(sa_content)
        f.write(go_content)
        f.write(program_start)

os.system('chmod +x rat')
